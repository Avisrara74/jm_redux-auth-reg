{"version":3,"sources":["serviceWorker.js","API/routes.js","API/index.js","redux/actions/index.js","components/home-page/index.js","components/sign-in/index.js","components/sign-up/index.js","react-router/private-route.js","react-router/auth-route.js","components/App.js","localstorage/index.js","redux/reducers/index.js","index.js"],"names":["Boolean","window","location","hostname","match","url","signUpUrl","signInUrl","httpHeader","method","headers","json","signUp","newUser","a","axios","data","JSON","stringify","routes","signIn","userData","signUpRequest","createAction","signUpSuccess","signUpFailure","signInRequest","signInSuccess","signInFailure","logOutSuccess","actionCreators","actions","HomePage","props","username","className","type","onClick","defaultProps","connect","state","formikInitialValues","email","password","dispatch","response","responseData","user","userResponseData","token","isAuthorized","alert","SignIn","isInputsDisable","formik","useFormik","initialValues","onSubmit","values","handleOnAuthorizationUser","handleSubmit","htmlFor","placeholder","id","name","onChange","handleChange","value","disabled","Password","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","htmlType","to","signInState","formikInicialValues","login","repeatPassword","formItems","uniqueId","title","formikValidationSchema","Yup","max","required","min","matches","oneOf","newUserData","SignUp","validationSchema","handleOnSignUp","resetForm","map","formItem","key","touched","errors","signUpState","Component","component","rest","render","App","useEffect","undefined","localStorage","path","exact","setItemToLocalstorage","setItem","String","removeItemFromLocalstorage","removeItem","handleActions","userDataInitial","action","payload","combineReducers","ext","__REDUX_DEVTOOLS_EXTENSION__","devtoolMiddleware","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54ab57fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const url = 'https://conduit.productionready.io/api/';\nexport const signUpUrl = `${url}users`;\nexport const signInUrl = `${url}users/login`;\n","import axios from 'axios';\nimport * as routes from './routes';\n\nconst httpHeader = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8',\n  },\n  json: true,\n};\n\n// регистрация\nexport const signUp = async (newUser) => axios({\n  ...httpHeader,\n  data: JSON.stringify(newUser),\n  url: routes.signUpUrl,\n});\n\n// авторизация\nexport const signIn = async (userData) => axios({\n  ...httpHeader,\n  data: JSON.stringify(userData),\n  url: routes.signInUrl,\n});\n","import { createAction } from 'redux-actions';\nimport * as method from '../../API';\n\nexport const signUpRequest = createAction('SIGN_UP_REQUEST');\nexport const signUpSuccess = createAction('SIGN_UP_SUCCESS');\nexport const signUpFailure = createAction('SIGN_UP_FAILURE');\n\n// регистрация\nexport const signUp = (newUserData) => async (dispatch) => {\n  dispatch(signUpRequest());\n  try {\n    await method.signUp(newUserData);\n    alert('Регистрация прошла успешно'); // eslint-disable-line no-alert\n    dispatch(signUpSuccess());\n  } catch (err) {\n    alert('Пользователь с таким email уже существует'); // eslint-disable-line no-alert\n    dispatch(signUpFailure());\n    throw err;\n  }\n};\n\nexport const signInRequest = createAction('LOG_IN_REQUEST');\nexport const signInSuccess = createAction('LOG_IN_SUCCESS');\nexport const signInFailure = createAction('LOG_IN_FAILURE');\n\n// авторизация\nexport const signIn = (userData) => async (dispatch) => {\n  dispatch(signInRequest());\n  try {\n    const response = await method.signIn(userData);\n    const responseData = response.data.user;\n    const userResponseData = {\n      username: responseData.username,\n      token: responseData.token,\n      isAuthorized: true,\n    };\n    dispatch(signInSuccess(userResponseData));\n  } catch (err) {\n    alert('Проверьте введённые данные'); // eslint-disable-line no-alert\n    dispatch(signInFailure());\n    throw err;\n  }\n};\n\nexport const logOutSuccess = createAction('LOGOUT_SUCCESS');\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd';\nimport * as actions from '../../redux/actions';\nimport '../style.css';\nimport 'antd/dist/antd.css';\n\nconst actionCreators = {\n  logOutSuccess: actions.logOutSuccess,\n};\n\nconst HomePage = (props) => {\n  const { logOutSuccess, username } = props;\n\n  const handleOnLogOut = () => {\n    logOutSuccess();\n  };\n\n  return (\n    <div className=\"home\">\n      <span className=\"home-title\">\n        {`Привет, ${username}`}\n      </span>\n      <Button className=\"home-logout\" type=\"primary\" onClick={handleOnLogOut}>Выход</Button>\n    </div>\n  );\n};\n\nHomePage.propTypes = {\n  logOutSuccess: propTypes.func,\n  username: propTypes.string,\n};\n\nHomePage.defaultProps = {\n  logOutSuccess: null,\n  username: '',\n};\n\nexport default connect((state) => ({\n  username: state.userData.username,\n}), actionCreators)(HomePage);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { Button, Input } from 'antd';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport { EyeInvisibleOutlined, EyeTwoTone } from '@ant-design/icons';\nimport 'antd/dist/antd.css';\nimport '../style.css';\nimport * as actions from '../../redux/actions';\n\nconst formikInitialValues = {\n  email: '',\n  password: '',\n};\n\nconst mapStateToProps = (state) => {\n  const { signInState } = state;\n  const isInputsDisable = (signInState === 'requested');\n\n  return { isInputsDisable };\n};\n\nconst actionCreators = {\n  signIn: actions.signIn,\n};\n\nconst SignIn = (props) => {\n  const { isInputsDisable, signIn } = props;\n\n  const handleOnAuthorizationUser = () => {\n    // eslint-disable-next-line no-use-before-define\n    const { email, password } = formik.values;\n    const userData = {\n      user: {\n        email,\n        password,\n      },\n    };\n    signIn(userData);\n  };\n\n  const formik = useFormik({\n    initialValues: formikInitialValues,\n    onSubmit: () => {\n      handleOnAuthorizationUser();\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"form\">\n      <div className=\"form-title\">Авторизация</div>\n      <label htmlFor=\"email\" className=\"form-item\">\n        Почта:\n        <Input\n          placeholder=\"Введите Email\"\n          id=\"email\"\n          name=\"email\"\n          onChange={formik.handleChange}\n          value={formik.values.email}\n          disabled={isInputsDisable}\n        />\n      </label>\n\n      <label htmlFor=\"password\" className=\"form-item\">\n        Пароль:\n        <Input.Password\n          id=\"password\"\n          name=\"password\"\n          placeholder=\"Введите Пароль\"\n          onChange={formik.handleChange}\n          value={formik.values.password}\n          iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\n          disabled={isInputsDisable}\n        />\n      </label>\n\n      <div className=\"form-item\">\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          className=\"form-submit\"\n          onClick={formik.handleSubmit}\n        >\n          Войти\n        </Button>\n        <Link to=\"sign-up\" className=\"form-link\">Регистрация</Link>\n      </div>\n    </form>\n  );\n};\n\nSignIn.propTypes = {\n  signIn: propTypes.func,\n  isInputsDisable: propTypes.bool,\n};\n\nSignIn.defaultProps = {\n  signIn: null,\n  isInputsDisable: false,\n};\n\nexport default connect(mapStateToProps, actionCreators)(SignIn);\n","import React from 'react';\nimport { uniqueId } from 'lodash';\nimport { connect } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { Button, Input } from 'antd';\nimport propTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport * as actions from '../../redux/actions';\nimport '../style.css';\n\nconst formikInicialValues = {\n  login: '',\n  email: '',\n  password: '',\n  repeatPassword: '',\n};\n\nconst formItems = [\n  {\n    id: uniqueId(), title: 'Логин:', name: 'login', placeholder: 'Введите логин',\n  },\n  {\n    id: uniqueId(), title: 'Почта:', name: 'email', placeholder: 'Введите почту',\n  },\n  {\n    id: uniqueId(), title: 'Пароль:', name: 'password', placeholder: 'Введите пароль',\n  },\n  {\n    id: uniqueId(), title: 'Повторите пароль:', name: 'repeatPassword', placeholder: 'Повторите пароль',\n  },\n];\n\nconst formikValidationSchema = Yup.object({\n  login: Yup.string()\n    .max(30, 'Слишком длинный ник!')\n    .required('Заполните поле'),\n  email: Yup.string()\n    .email('Некорректный email')\n    .required('Заполните поле'),\n  password: Yup.string()\n    .min(8, 'Слишком короткий')\n    .max(50, 'Слишком длинный')\n    .matches(/^[A-Za-z0-9]+$/, 'Пароль может содержать только латинские символы и цифры')\n    .matches(/(?=.*[0-9])/, 'Пароль должен содержать хотя бы одну цифру')\n    .matches(/(?=.*[A-Z])/, 'Пароль должен содержать хотя бы одну заглавную букву')\n    .required('Заполните поле'),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Пароли должны совпадать')\n    .required('Заполните поле'),\n});\n\nconst mapStateToProps = (state) => {\n  const { signUpState } = state;\n  const isInputsDisable = (signUpState === 'requested');\n\n  const props = { isInputsDisable, signUpState };\n  return props;\n};\n\nconst actionCreators = {\n  signUp: actions.signUp,\n};\n\nconst SignUp = (props) => {\n  const formik = useFormik({\n    initialValues: formikInicialValues,\n    validationSchema: formikValidationSchema,\n    onSubmit: () => {\n      // eslint-disable-next-line no-use-before-define\n      handleOnSignUp();\n    },\n  });\n  const handleOnSignUp = async () => {\n    const { signUp } = props;\n    const { login, email, password } = formik.values;\n    const newUser = {\n      user: {\n        username: login,\n        email,\n        password,\n      },\n    };\n    signUp(newUser);\n    formik.resetForm();\n  };\n\n  const { isInputsDisable } = props;\n\n  const renderInputs = () => (\n    formItems.map((formItem) => (\n      <label key={formItem.id} htmlFor={formItem.name} className=\"form-item\">\n        {formItem.title}\n        <Input\n          type={(formItem.name === 'password' || formItem.name === 'repeatPassword') ? 'password' : 'text'}\n          placeholder={formItem.placeholder}\n          id={formItem.name}\n          name={formItem.name}\n          onChange={formik.handleChange}\n          value={formik.values[formItem.name]}\n          disabled={isInputsDisable}\n        />\n        {formik.touched[formItem.name] && formik.errors[formItem.name] ? (\n          <div className=\"form-item-error\">{formik.errors[formItem.name]}</div>\n        ) : null}\n      </label>\n    ))\n  );\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"form\">\n      <div className=\"form-title\">Регистрация</div>\n      {renderInputs()}\n      <div className=\"form-item\">\n        <Button\n          htmlType=\"submit\"\n          type=\"primary\"\n          className=\"form-submit\"\n          onClick={formik.handleSubmit}\n          disabled={isInputsDisable}\n        >\n          Зарегистрироваться\n        </Button>\n        <Link to=\"/sign-in\" className=\"form-link\">Страница авторизации</Link>\n      </div>\n    </form>\n  );\n};\n\nSignUp.propTypes = {\n  signUp: propTypes.func,\n  isInputsDisable: propTypes.bool,\n};\n\nSignUp.defaultProps = {\n  signUp: null,\n  isInputsDisable: false,\n};\n\nexport default connect(mapStateToProps, actionCreators)(SignUp);\n","/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst PrivateRoute = (props) => {\n  const { component: Component, isAuthorized, ...rest } = props;\n\n  return (\n    <Route\n      {...rest}\n      render={() => (isAuthorized ? <Component {...props} /> : <Redirect to=\"/sign-in\" />)}\n    />\n  );\n};\n\nexport default connect((state) => ({\n  isAuthorized: state.userData.isAuthorized,\n}), null)(PrivateRoute);\n","/* eslint react/prop-types: 0 */\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst AuthRoute = (props) => {\n  const { component: Component, isAuthorized, ...rest } = props;\n\n  return (\n    <Route\n      {...rest}\n      render={() => (isAuthorized ? <Redirect to=\"/\" /> : <Component {...props} />)}\n    />\n  );\n};\n\nexport default connect((state) => ({\n  isAuthorized: state.userData.isAuthorized,\n}), null)(AuthRoute);\n","import React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport HomePage from './home-page';\nimport SignIn from './sign-in';\nimport SignUp from './sign-up';\nimport PrivateRoute from '../react-router/private-route';\nimport AuthRoute from '../react-router/auth-route';\nimport './app.css';\nimport * as actions from '../redux/actions';\nimport { signInSuccess } from '../redux/actions';\n\nconst mapStateToProps = (state) => {\n  const { userData } = state;\n  const props = {\n    isAuthorized: userData.isAuthorized,\n    userData,\n  };\n  return props;\n};\n\nconst actionCreators = {\n  signInSuccess: actions.signInSuccess,\n};\n\nconst App = (props) => {\n  const { dispatch, isAuthorized } = props;\n  const authorizationCheck = () => {\n    if (localStorage.token === undefined) return;\n    dispatch(signInSuccess({\n      isAuthorized: true,\n      token: localStorage.token,\n      username: localStorage.username,\n    }));\n  };\n\n  useEffect(() => {\n    authorizationCheck();\n  }, [isAuthorized]);\n\n  return (\n    <Router>\n      <Switch>\n        <PrivateRoute path=\"/\" exact component={HomePage} />\n        <AuthRoute path=\"/sign-in\" component={SignIn} />\n        <AuthRoute path=\"/sign-up\" component={SignUp} />\n        <Redirect to=\"/sign-in\" />\n      </Switch>\n    </Router>\n  );\n};\n\nApp.propTypes = {\n  dispatch: propTypes.func,\n  isAuthorized: propTypes.bool,\n};\n\nApp.defaultProps = {\n  dispatch: null,\n  isAuthorized: false,\n};\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","export const setItemToLocalstorage = (key, value) => {\n  localStorage.setItem(String(key), String(value));\n};\n\nexport const removeItemFromLocalstorage = (key) => {\n  localStorage.removeItem(key);\n};\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as actions from '../actions';\nimport { removeItemFromLocalstorage, setItemToLocalstorage } from '../../localstorage';\n\nconst signUpState = handleActions({\n  [actions.signUpRequest]() {\n    return 'requested';\n  },\n  [actions.signUpFailure]() {\n    return 'failed';\n  },\n  [actions.signUpSuccess]() {\n    return 'finished';\n  },\n}, 'none');\n\nconst signInState = handleActions({\n  [actions.signInRequest]() {\n    return 'requested';\n  },\n  [actions.signInFailure]() {\n    return 'failed';\n  },\n  [actions.signInSuccess]() {\n    return 'finished';\n  },\n}, 'none');\n\nconst userDataInitial = { username: '', token: '', isAuthorized: false };\nconst userData = handleActions({\n  [actions.signInSuccess](state, action) {\n    const { username, token, isAuthorized } = action.payload;\n    setItemToLocalstorage('token', token);\n    setItemToLocalstorage('username', username);\n    return { username, token, isAuthorized };\n  },\n  [actions.logOutSuccess]() {\n    removeItemFromLocalstorage('token');\n    removeItemFromLocalstorage('username');\n    return userDataInitial;\n  },\n}, userDataInitial);\n\nexport default combineReducers({\n  signUpState,\n  signInState,\n  userData,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport reducers from './redux/reducers';\n\n/* eslint-disable no-underscore-dangle */\nconst ext = window.__REDUX_DEVTOOLS_EXTENSION__;\nconst devtoolMiddleware = ext && ext();\n/* eslint-enable */\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(thunk),\n    devtoolMiddleware,\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App dispatch={store.dispatch} />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}